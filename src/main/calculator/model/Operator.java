package main.calculator.model;import main.common.exception.ErrorMessage;import java.util.Arrays;import java.util.function.BiFunction;public enum Operator {    PLUS("+", (n1, n2) -> n1 + n2),    MINUS("-", (n1, n2) -> n1 - n2),    TIMES("*", (n1, n2) -> n1 * n2),    DIVIDE("/", (n1, n2) -> {        if (n2 == 0) {            throw new ArithmeticException(ErrorMessage.DIVIDE_BY_ZERO.getmessage());        }        return n1 / n2;    }),    OPEN_BRACKET("(", null),    CLOSE_BRACKET(")", null);    private final String symbol;    private final BiFunction<Double, Double, Double> expression;    Operator(String operator, BiFunction<Double, Double, Double> expression) {        this.symbol = operator;        this.expression = expression;    }    public static Operator findSymbol(char inputSymbol) {        return Arrays.stream(Operator.values())                .filter(oper -> oper.symbol.equals(Character.toString(inputSymbol)))                .findAny()                .orElseThrow(() -> new IllegalArgumentException(ErrorMessage.INVALID_SYMBOL_OPTION.getmessage()));    }    public static double operate(char cur, double num1, double num2) {        return findSymbol(cur).expression.apply(num1, num2);    }}