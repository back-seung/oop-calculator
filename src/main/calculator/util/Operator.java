package main.calculator.util;import main.common.exception.DivideByZeroException;import main.common.exception.SymbolNotFoundException;import java.util.Arrays;import java.util.function.BiFunction;// 패키지 이동public enum Operator {    PLUS("+", (n1, n2) -> n1 + n2),    MINUS("-", (n1, n2) -> n1 - n2),    TIMES("*", (n1, n2) -> n1 * n2),    DIVIDE("/", (n1, n2) -> {        if (n2 == 0) {            throw new DivideByZeroException();        }        return n1 / n2;    }),    OPEN_BRACKET("(", null),    CLOSE_BRACKET(")", null);    private final String symbol;    private final BiFunction<Double, Double, Double> expression;    Operator(String operator, BiFunction<Double, Double, Double> expression) {        this.symbol = operator;        this.expression = expression;    }    public static Operator findSymbol(char symbol) {        return Arrays.stream(Operator.values())                .filter(oper -> oper.symbol.equals(Character.toString(symbol)))                .findAny()                .orElseThrow(SymbolNotFoundException::new);    }    public static double operate(char cur, double num1, double num2) {        return findSymbol(cur).expression.apply(num1, num2);    }}