package main.calculator.engine;import main.calculator.model.CalculateExpression;import main.calculator.util.Operator;import java.util.ArrayDeque;import java.util.Deque;// 예를 차라리 서비스로?public class Calculator {    public double calculate(CalculateExpression expression) {        String postfix = infixToPostfix(expression.getExpression());        Deque<Double> deque = new ArrayDeque<>();        for (int i = 0; i < postfix.length(); i++) {            char cur = postfix.charAt(i);            double num1, num2;            if (Character.isDigit(cur)) {                deque.push(Double.valueOf(Character.toString(cur)));            } else {                num2 = Double.valueOf(deque.pop().toString());                num1 = Double.valueOf(deque.pop().toString());                deque.push(Operator.operate(cur, num1, num2));            }        }        return deque.pop();    }    private String infixToPostfix(String infixExpression) {        Deque<Character> opStack = new ArrayDeque<>();        StringBuilder sb = new StringBuilder();        for (int i = 0; i < infixExpression.length(); i++) {            char cur = infixExpression.charAt(i);            if (Character.isDigit(cur)) {                sb.append(cur);            } else if (cur == '(') {                opStack.push(cur);            } else if (cur == ')') {                while (!opStack.isEmpty() && opStack.peek() != '(') {                    sb.append(opStack.pop());                }                opStack.pop();            } else {                while (!opStack.isEmpty() && compareOp(cur, opStack.peek()) >= 0) {                    sb.append(opStack.pop());                }                opStack.push(cur);            }        }        while (!opStack.isEmpty()) {            sb.append(opStack.pop());        }        return sb.toString();    }    private int getOpPriority(char symbol) {        Operator nowSymbol = Operator.findSymbol(symbol);        int priority;        switch (nowSymbol) {            case TIMES, DIVIDE -> priority = 3;            case PLUS, MINUS -> priority = 2;            case OPEN_BRACKET -> priority = 1;            default -> priority = 0;        }        return priority;    }    private int compareOp(char dequeOp, char nowOp) {        int dequeOpPriority = getOpPriority(dequeOp);        int nowOpPriority = getOpPriority(nowOp);        if (dequeOpPriority < nowOpPriority) {            return 1;        }        if (dequeOpPriority > nowOpPriority) {            return -1;        }        return 0;    }}